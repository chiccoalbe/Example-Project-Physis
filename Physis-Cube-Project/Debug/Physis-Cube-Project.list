
Physis-Cube-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001290  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800141c  0800141c  0000241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800145c  0800145c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800145c  0800145c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800145c  0800145c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800145c  0800145c  0000245c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001460  08001460  00002460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001464  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001470  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001470  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003853  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e08  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00007698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a8  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a49  00000000  00000000  00007f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e5c  00000000  00000000  0001f991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009549d  00000000  00000000  000247ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9c8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000124c  00000000  00000000  000b9cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000baf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001404 	.word	0x08001404

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001404 	.word	0x08001404

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f8df 	bl	8000392 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f802 	bl	80001dc <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	bf00      	nop
 80001da:	e7fd      	b.n	80001d8 <main+0xc>

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b096      	sub	sp, #88	@ 0x58
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	2244      	movs	r2, #68	@ 0x44
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 f8de 	bl	80013ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	463b      	mov	r3, r7
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000202:	f000 fa2f 	bl	8000664 <HAL_PWREx_ControlVoltageScaling>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020c:	f000 f82c 	bl	8000268 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000210:	2310      	movs	r3, #16
 8000212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021c:	2360      	movs	r3, #96	@ 0x60
 800021e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000220:	2300      	movs	r3, #0
 8000222:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fa71 	bl	8000710 <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000234:	f000 f818 	bl	8000268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024c:	463b      	mov	r3, r7
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f000 febf 	bl	8000fd4 <HAL_RCC_ClockConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800025c:	f000 f804 	bl	8000268 <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3758      	adds	r7, #88	@ 0x58
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800026c:	b672      	cpsid	i
}
 800026e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <Error_Handler+0x8>

08000274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800027a:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <HAL_MspInit+0x44>)
 800027c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800027e:	4a0e      	ldr	r2, [pc, #56]	@ (80002b8 <HAL_MspInit+0x44>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6613      	str	r3, [r2, #96]	@ 0x60
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <HAL_MspInit+0x44>)
 8000288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <HAL_MspInit+0x44>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000296:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <HAL_MspInit+0x44>)
 8000298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800029c:	6593      	str	r3, [r2, #88]	@ 0x58
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <HAL_MspInit+0x44>)
 80002a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <NMI_Handler+0x4>

080002c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <HardFault_Handler+0x4>

080002cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <MemManage_Handler+0x4>

080002d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d8:	bf00      	nop
 80002da:	e7fd      	b.n	80002d8 <BusFault_Handler+0x4>

080002dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <UsageFault_Handler+0x4>

080002e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000312:	f000 f893 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <SystemInit+0x20>)
 8000322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000326:	4a05      	ldr	r2, [pc, #20]	@ (800033c <SystemInit+0x20>)
 8000328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800032c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000344:	f7ff ffea 	bl	800031c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800036e:	f001 f825 	bl	80013bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000372:	f7ff ff2b 	bl	80001cc <main>

08000376 <LoopForever>:

LoopForever:
    b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000378:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000384:	08001464 	.word	0x08001464
  ldr r2, =_sbss
 8000388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800038c:	2000002c 	.word	0x2000002c

08000390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC1_2_IRQHandler>

08000392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000398:	2300      	movs	r3, #0
 800039a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800039c:	2003      	movs	r0, #3
 800039e:	f000 f91f 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003a2:	200f      	movs	r0, #15
 80003a4:	f000 f80e 	bl	80003c4 <HAL_InitTick>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80003ae:	2301      	movs	r3, #1
 80003b0:	71fb      	strb	r3, [r7, #7]
 80003b2:	e001      	b.n	80003b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003b4:	f7ff ff5e 	bl	8000274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80003cc:	2300      	movs	r3, #0
 80003ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80003d0:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <HAL_InitTick+0x6c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d023      	beq.n	8000420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80003d8:	4b16      	ldr	r3, [pc, #88]	@ (8000434 <HAL_InitTick+0x70>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <HAL_InitTick+0x6c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f91d 	bl	800062e <HAL_SYSTICK_Config>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d10f      	bne.n	800041a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b0f      	cmp	r3, #15
 80003fe:	d809      	bhi.n	8000414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000400:	2200      	movs	r2, #0
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000408:	f000 f8f5 	bl	80005f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800040c:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <HAL_InitTick+0x74>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6013      	str	r3, [r2, #0]
 8000412:	e007      	b.n	8000424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	e004      	b.n	8000424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800041a:	2301      	movs	r3, #1
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	e001      	b.n	8000424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000008 	.word	0x20000008
 8000434:	20000000 	.word	0x20000000
 8000438:	20000004 	.word	0x20000004

0800043c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <HAL_IncTick+0x20>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <HAL_IncTick+0x24>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <HAL_IncTick+0x24>)
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000008 	.word	0x20000008
 8000460:	20000028 	.word	0x20000028

08000464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return uwTick;
 8000468:	4b03      	ldr	r3, [pc, #12]	@ (8000478 <HAL_GetTick+0x14>)
 800046a:	681b      	ldr	r3, [r3, #0]
}
 800046c:	4618      	mov	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000028 	.word	0x20000028

0800047c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f003 0307 	and.w	r3, r3, #7
 800048a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <__NVIC_SetPriorityGrouping+0x44>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ae:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <__NVIC_SetPriorityGrouping+0x44>)
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	60d3      	str	r3, [r2, #12]
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004c8:	4b04      	ldr	r3, [pc, #16]	@ (80004dc <__NVIC_GetPriorityGrouping+0x18>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	f003 0307 	and.w	r3, r3, #7
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	db0a      	blt.n	800050a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	490c      	ldr	r1, [pc, #48]	@ (800052c <__NVIC_SetPriority+0x4c>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	0112      	lsls	r2, r2, #4
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	440b      	add	r3, r1
 8000504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000508:	e00a      	b.n	8000520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4908      	ldr	r1, [pc, #32]	@ (8000530 <__NVIC_SetPriority+0x50>)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	3b04      	subs	r3, #4
 8000518:	0112      	lsls	r2, r2, #4
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	440b      	add	r3, r1
 800051e:	761a      	strb	r2, [r3, #24]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000534:	b480      	push	{r7}
 8000536:	b089      	sub	sp, #36	@ 0x24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f003 0307 	and.w	r3, r3, #7
 8000546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	f1c3 0307 	rsb	r3, r3, #7
 800054e:	2b04      	cmp	r3, #4
 8000550:	bf28      	it	cs
 8000552:	2304      	movcs	r3, #4
 8000554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	3304      	adds	r3, #4
 800055a:	2b06      	cmp	r3, #6
 800055c:	d902      	bls.n	8000564 <NVIC_EncodePriority+0x30>
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3b03      	subs	r3, #3
 8000562:	e000      	b.n	8000566 <NVIC_EncodePriority+0x32>
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43da      	mvns	r2, r3
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	401a      	ands	r2, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800057c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	43d9      	mvns	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	4313      	orrs	r3, r2
         );
}
 800058e:	4618      	mov	r0, r3
 8000590:	3724      	adds	r7, #36	@ 0x24
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005ac:	d301      	bcc.n	80005b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00f      	b.n	80005d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <SysTick_Config+0x40>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ba:	210f      	movs	r1, #15
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005c0:	f7ff ff8e 	bl	80004e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <SysTick_Config+0x40>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <SysTick_Config+0x40>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff47 	bl	800047c <__NVIC_SetPriorityGrouping>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000608:	f7ff ff5c 	bl	80004c4 <__NVIC_GetPriorityGrouping>
 800060c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	6978      	ldr	r0, [r7, #20]
 8000614:	f7ff ff8e 	bl	8000534 <NVIC_EncodePriority>
 8000618:	4602      	mov	r2, r0
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff5d 	bl	80004e0 <__NVIC_SetPriority>
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ffb0 	bl	800059c <SysTick_Config>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <HAL_PWREx_GetVoltageRange+0x18>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40007000 	.word	0x40007000

08000664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000672:	d130      	bne.n	80006d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800067c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000680:	d038      	beq.n	80006f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800068a:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800068c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000690:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2232      	movs	r2, #50	@ 0x32
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80006a8:	e002      	b.n	80006b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	d102      	bne.n	80006c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f2      	bne.n	80006aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006d0:	d110      	bne.n	80006f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80006d2:	2303      	movs	r3, #3
 80006d4:	e00f      	b.n	80006f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006e2:	d007      	beq.n	80006f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40007000 	.word	0x40007000
 8000708:	20000000 	.word	0x20000000
 800070c:	431bde83 	.word	0x431bde83

08000710 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	f000 bc4f 	b.w	8000fc2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000724:	4b97      	ldr	r3, [pc, #604]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 030c 	and.w	r3, r3, #12
 800072c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800072e:	4b95      	ldr	r3, [pc, #596]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	f003 0303 	and.w	r3, r3, #3
 8000736:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 80e6 	beq.w	8000912 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <HAL_RCC_OscConfig+0x4c>
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	2b0c      	cmp	r3, #12
 8000750:	f040 808d 	bne.w	800086e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b01      	cmp	r3, #1
 8000758:	f040 8089 	bne.w	800086e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800075c:	4b89      	ldr	r3, [pc, #548]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <HAL_RCC_OscConfig+0x66>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	f000 bc26 	b.w	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800077a:	4b82      	ldr	r3, [pc, #520]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <HAL_RCC_OscConfig+0x80>
 8000786:	4b7f      	ldr	r3, [pc, #508]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800078e:	e005      	b.n	800079c <HAL_RCC_OscConfig+0x8c>
 8000790:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800079c:	4293      	cmp	r3, r2
 800079e:	d224      	bcs.n	80007ea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fda1 	bl	80012ec <RCC_SetFlashLatencyFromMSIRange>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f000 bc06 	b.w	8000fc2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007b6:	4b73      	ldr	r3, [pc, #460]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a72      	ldr	r2, [pc, #456]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b70      	ldr	r3, [pc, #448]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	496d      	ldr	r1, [pc, #436]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007d0:	4313      	orrs	r3, r2
 80007d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007d4:	4b6b      	ldr	r3, [pc, #428]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	4968      	ldr	r1, [pc, #416]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	604b      	str	r3, [r1, #4]
 80007e8:	e025      	b.n	8000836 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007ea:	4b66      	ldr	r3, [pc, #408]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a65      	ldr	r2, [pc, #404]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b63      	ldr	r3, [pc, #396]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000802:	4960      	ldr	r1, [pc, #384]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000804:	4313      	orrs	r3, r2
 8000806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000808:	4b5e      	ldr	r3, [pc, #376]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	495b      	ldr	r1, [pc, #364]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000818:	4313      	orrs	r3, r2
 800081a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d109      	bne.n	8000836 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd60 	bl	80012ec <RCC_SetFlashLatencyFromMSIRange>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e3c5      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000836:	f000 fccd 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800083a:	4602      	mov	r2, r0
 800083c:	4b51      	ldr	r3, [pc, #324]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	4950      	ldr	r1, [pc, #320]	@ (8000988 <HAL_RCC_OscConfig+0x278>)
 8000848:	5ccb      	ldrb	r3, [r1, r3]
 800084a:	f003 031f 	and.w	r3, r3, #31
 800084e:	fa22 f303 	lsr.w	r3, r2, r3
 8000852:	4a4e      	ldr	r2, [pc, #312]	@ (800098c <HAL_RCC_OscConfig+0x27c>)
 8000854:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <HAL_RCC_OscConfig+0x280>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fdb2 	bl	80003c4 <HAL_InitTick>
 8000860:	4603      	mov	r3, r0
 8000862:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d052      	beq.n	8000910 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	e3a9      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d032      	beq.n	80008dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000876:	4b43      	ldr	r3, [pc, #268]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a42      	ldr	r2, [pc, #264]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000882:	f7ff fdef 	bl	8000464 <HAL_GetTick>
 8000886:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000888:	e008      	b.n	800089c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800088a:	f7ff fdeb 	bl	8000464 <HAL_GetTick>
 800088e:	4602      	mov	r2, r0
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	2b02      	cmp	r3, #2
 8000896:	d901      	bls.n	800089c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000898:	2303      	movs	r3, #3
 800089a:	e392      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f0      	beq.n	800088a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80008a8:	4b36      	ldr	r3, [pc, #216]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a35      	ldr	r2, [pc, #212]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008c0:	4930      	ldr	r1, [pc, #192]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a1b      	ldr	r3, [r3, #32]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	492b      	ldr	r1, [pc, #172]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008d6:	4313      	orrs	r3, r2
 80008d8:	604b      	str	r3, [r1, #4]
 80008da:	e01a      	b.n	8000912 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80008dc:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80008e8:	f7ff fdbc 	bl	8000464 <HAL_GetTick>
 80008ec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80008ee:	e008      	b.n	8000902 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008f0:	f7ff fdb8 	bl	8000464 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e35f      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000902:	4b20      	ldr	r3, [pc, #128]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f0      	bne.n	80008f0 <HAL_RCC_OscConfig+0x1e0>
 800090e:	e000      	b.n	8000912 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000910:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d073      	beq.n	8000a06 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	2b08      	cmp	r3, #8
 8000922:	d005      	beq.n	8000930 <HAL_RCC_OscConfig+0x220>
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	2b0c      	cmp	r3, #12
 8000928:	d10e      	bne.n	8000948 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d10b      	bne.n	8000948 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d063      	beq.n	8000a04 <HAL_RCC_OscConfig+0x2f4>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d15f      	bne.n	8000a04 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e33c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000950:	d106      	bne.n	8000960 <HAL_RCC_OscConfig+0x250>
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e025      	b.n	80009ac <HAL_RCC_OscConfig+0x29c>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000968:	d114      	bne.n	8000994 <HAL_RCC_OscConfig+0x284>
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a05      	ldr	r2, [pc, #20]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a02      	ldr	r2, [pc, #8]	@ (8000984 <HAL_RCC_OscConfig+0x274>)
 800097c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e013      	b.n	80009ac <HAL_RCC_OscConfig+0x29c>
 8000984:	40021000 	.word	0x40021000
 8000988:	0800141c 	.word	0x0800141c
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	4b8f      	ldr	r3, [pc, #572]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a8e      	ldr	r2, [pc, #568]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 800099a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b8c      	ldr	r3, [pc, #560]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a8b      	ldr	r2, [pc, #556]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d013      	beq.n	80009dc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009b4:	f7ff fd56 	bl	8000464 <HAL_GetTick>
 80009b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009bc:	f7ff fd52 	bl	8000464 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b64      	cmp	r3, #100	@ 0x64
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e2f9      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80009ce:	4b81      	ldr	r3, [pc, #516]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f0      	beq.n	80009bc <HAL_RCC_OscConfig+0x2ac>
 80009da:	e014      	b.n	8000a06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009dc:	f7ff fd42 	bl	8000464 <HAL_GetTick>
 80009e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009e4:	f7ff fd3e 	bl	8000464 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	@ 0x64
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e2e5      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009f6:	4b77      	ldr	r3, [pc, #476]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f0      	bne.n	80009e4 <HAL_RCC_OscConfig+0x2d4>
 8000a02:	e000      	b.n	8000a06 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d060      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d005      	beq.n	8000a24 <HAL_RCC_OscConfig+0x314>
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	d119      	bne.n	8000a52 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d116      	bne.n	8000a52 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a24:	4b6b      	ldr	r3, [pc, #428]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <HAL_RCC_OscConfig+0x32c>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e2c2      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	4b65      	ldr	r3, [pc, #404]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	061b      	lsls	r3, r3, #24
 8000a4a:	4962      	ldr	r1, [pc, #392]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a50:	e040      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d023      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a5d      	ldr	r2, [pc, #372]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a66:	f7ff fcfd 	bl	8000464 <HAL_GetTick>
 8000a6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a6c:	e008      	b.n	8000a80 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a6e:	f7ff fcf9 	bl	8000464 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d901      	bls.n	8000a80 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e2a0      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a80:	4b54      	ldr	r3, [pc, #336]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f0      	beq.n	8000a6e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a8c:	4b51      	ldr	r3, [pc, #324]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	061b      	lsls	r3, r3, #24
 8000a9a:	494e      	ldr	r1, [pc, #312]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e018      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a4b      	ldr	r2, [pc, #300]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aae:	f7ff fcd9 	bl	8000464 <HAL_GetTick>
 8000ab2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ab4:	e008      	b.n	8000ac8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fcd5 	bl	8000464 <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d901      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e27c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ac8:	4b42      	ldr	r3, [pc, #264]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f0      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f000 8082 	beq.w	8000be6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d05f      	beq.n	8000baa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000aea:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000af0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d037      	beq.n	8000b70 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e254      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01b      	beq.n	8000b5a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b28:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b2a:	f023 0301 	bic.w	r3, r3, #1
 8000b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000b32:	f7ff fc97 	bl	8000464 <HAL_GetTick>
 8000b36:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b38:	e008      	b.n	8000b4c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fc93 	bl	8000464 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	2b11      	cmp	r3, #17
 8000b46:	d901      	bls.n	8000b4c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e23a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1ef      	bne.n	8000b3a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b60:	f023 0210 	bic.w	r2, r3, #16
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	491a      	ldr	r1, [pc, #104]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b80:	f7ff fc70 	bl	8000464 <HAL_GetTick>
 8000b84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b86:	e008      	b.n	8000b9a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b88:	f7ff fc6c 	bl	8000464 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b11      	cmp	r3, #17
 8000b94:	d901      	bls.n	8000b9a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e213      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0ef      	beq.n	8000b88 <HAL_RCC_OscConfig+0x478>
 8000ba8:	e01d      	b.n	8000be6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bb0:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bba:	f7ff fc53 	bl	8000464 <HAL_GetTick>
 8000bbe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bc0:	e00a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fc4f 	bl	8000464 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b11      	cmp	r3, #17
 8000bce:	d903      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e1f6      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
 8000bd4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bd8:	4ba9      	ldr	r3, [pc, #676]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ed      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80bd 	beq.w	8000d6e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000bfa:	4ba1      	ldr	r3, [pc, #644]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10e      	bne.n	8000c24 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b9e      	ldr	r3, [pc, #632]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	4a9d      	ldr	r2, [pc, #628]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c12:	4b9b      	ldr	r3, [pc, #620]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c24:	4b97      	ldr	r3, [pc, #604]	@ (8000e84 <HAL_RCC_OscConfig+0x774>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d118      	bne.n	8000c62 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c30:	4b94      	ldr	r3, [pc, #592]	@ (8000e84 <HAL_RCC_OscConfig+0x774>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a93      	ldr	r2, [pc, #588]	@ (8000e84 <HAL_RCC_OscConfig+0x774>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fc12 	bl	8000464 <HAL_GetTick>
 8000c40:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c44:	f7ff fc0e 	bl	8000464 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e1b5      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c56:	4b8b      	ldr	r3, [pc, #556]	@ (8000e84 <HAL_RCC_OscConfig+0x774>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d02c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8000c6e:	4b84      	ldr	r3, [pc, #528]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c80:	497f      	ldr	r1, [pc, #508]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d010      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000c94:	4b7a      	ldr	r3, [pc, #488]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c9a:	4a79      	ldr	r2, [pc, #484]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000ca4:	4b76      	ldr	r3, [pc, #472]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000caa:	4a75      	ldr	r2, [pc, #468]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cb4:	e018      	b.n	8000ce8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cb6:	4b72      	ldr	r3, [pc, #456]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cbc:	4a70      	ldr	r2, [pc, #448]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cc6:	e00f      	b.n	8000ce8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cce:	4a6c      	ldr	r2, [pc, #432]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000cd8:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cde:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000ce0:	f023 0304 	bic.w	r3, r3, #4
 8000ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d016      	beq.n	8000d1e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fbb8 	bl	8000464 <HAL_GetTick>
 8000cf4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fbb4 	bl	8000464 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e159      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0ed      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x5e8>
 8000d1c:	e01d      	b.n	8000d5a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fba1 	bl	8000464 <HAL_GetTick>
 8000d22:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d24:	e00a      	b.n	8000d3c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d26:	f7ff fb9d 	bl	8000464 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e142      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d3c:	4b50      	ldr	r3, [pc, #320]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1ed      	bne.n	8000d26 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d50:	4a4b      	ldr	r2, [pc, #300]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d105      	bne.n	8000d6e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d62:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a46      	ldr	r2, [pc, #280]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d03c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d01c      	beq.n	8000dbc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d88:	4a3d      	ldr	r2, [pc, #244]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fb67 	bl	8000464 <HAL_GetTick>
 8000d96:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d9a:	f7ff fb63 	bl	8000464 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e10a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000dac:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0ef      	beq.n	8000d9a <HAL_RCC_OscConfig+0x68a>
 8000dba:	e01b      	b.n	8000df4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000dbc:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fb4a 	bl	8000464 <HAL_GetTick>
 8000dd0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dd4:	f7ff fb46 	bl	8000464 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e0ed      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000de6:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1ef      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80e1 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	f040 80b5 	bne.w	8000f72 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d124      	bne.n	8000e66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e26:	3b01      	subs	r3, #1
 8000e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d11b      	bne.n	8000e66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d113      	bne.n	8000e66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e48:	085b      	lsrs	r3, r3, #1
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d109      	bne.n	8000e66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d05f      	beq.n	8000f26 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d05a      	beq.n	8000f22 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a03      	ldr	r2, [pc, #12]	@ (8000e80 <HAL_RCC_OscConfig+0x770>)
 8000e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e78:	f7ff faf4 	bl	8000464 <HAL_GetTick>
 8000e7c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e7e:	e00c      	b.n	8000e9a <HAL_RCC_OscConfig+0x78a>
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e88:	f7ff faec 	bl	8000464 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e093      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea6:	4b49      	ldr	r3, [pc, #292]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <HAL_RCC_OscConfig+0x8c0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000eb6:	3a01      	subs	r2, #1
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000ec0:	0212      	lsls	r2, r2, #8
 8000ec2:	4311      	orrs	r1, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000ec8:	0852      	lsrs	r2, r2, #1
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	0552      	lsls	r2, r2, #21
 8000ece:	4311      	orrs	r1, r2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000ed4:	0852      	lsrs	r2, r2, #1
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	0652      	lsls	r2, r2, #25
 8000eda:	430a      	orrs	r2, r1
 8000edc:	493b      	ldr	r1, [pc, #236]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a36      	ldr	r2, [pc, #216]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000ef4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000efa:	f7ff fab3 	bl	8000464 <HAL_GetTick>
 8000efe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff faaf 	bl	8000464 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e056      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f20:	e04e      	b.n	8000fc0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e04d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d146      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f3c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	4a22      	ldr	r2, [pc, #136]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f48:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000f4a:	f7ff fa8b 	bl	8000464 <HAL_GetTick>
 8000f4e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f52:	f7ff fa87 	bl	8000464 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e02e      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x842>
 8000f70:	e026      	b.n	8000fc0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	2b0c      	cmp	r3, #12
 8000f76:	d021      	beq.n	8000fbc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fa6e 	bl	8000464 <HAL_GetTick>
 8000f88:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8c:	f7ff fa6a 	bl	8000464 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e011      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_RCC_OscConfig+0x8bc>)
 8000fb0:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8000fb4:	f023 0303 	bic.w	r3, r3, #3
 8000fb8:	60d3      	str	r3, [r2, #12]
 8000fba:	e001      	b.n	8000fc0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	f99f808c 	.word	0xf99f808c

08000fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0e7      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b75      	ldr	r3, [pc, #468]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d910      	bls.n	8001018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b72      	ldr	r3, [pc, #456]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 0207 	bic.w	r2, r3, #7
 8000ffe:	4970      	ldr	r1, [pc, #448]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001006:	4b6e      	ldr	r3, [pc, #440]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d001      	beq.n	8001018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0cf      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d010      	beq.n	8001046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001030:	429a      	cmp	r2, r3
 8001032:	d908      	bls.n	8001046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001034:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4960      	ldr	r1, [pc, #384]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001042:	4313      	orrs	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04c      	beq.n	80010ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800105a:	4b5a      	ldr	r3, [pc, #360]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d121      	bne.n	80010aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0a6      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d107      	bne.n	8001082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001072:	4b54      	ldr	r3, [pc, #336]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d115      	bne.n	80010aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e09a      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800108a:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e08e      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800109a:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e086      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f023 0203 	bic.w	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4943      	ldr	r1, [pc, #268]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010bc:	f7ff f9d2 	bl	8000464 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	e00a      	b.n	80010da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff f9ce 	bl	8000464 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e06e      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 020c 	and.w	r2, r3, #12
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d1eb      	bne.n	80010c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d010      	beq.n	800111a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001104:	429a      	cmp	r2, r3
 8001106:	d208      	bcs.n	800111a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	492b      	ldr	r1, [pc, #172]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d210      	bcs.n	800114a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 0207 	bic.w	r2, r3, #7
 8001130:	4923      	ldr	r1, [pc, #140]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <HAL_RCC_ClockConfig+0x1ec>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d001      	beq.n	800114a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e036      	b.n	80011b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4918      	ldr	r1, [pc, #96]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4910      	ldr	r1, [pc, #64]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001188:	f000 f824 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	490b      	ldr	r1, [pc, #44]	@ (80011c8 <HAL_RCC_ClockConfig+0x1f4>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <HAL_RCC_ClockConfig+0x1f8>)
 80011a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_RCC_ClockConfig+0x1fc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f909 	bl	80003c4 <HAL_InitTick>
 80011b2:	4603      	mov	r3, r0
 80011b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	0800141c 	.word	0x0800141c
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e2:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x34>
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d121      	bne.n	8001246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d11e      	bne.n	8001246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001214:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e005      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001224:	4b2d      	ldr	r3, [pc, #180]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001230:	4a2b      	ldr	r2, [pc, #172]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10d      	bne.n	800125c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001244:	e00a      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d102      	bne.n	8001252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	e004      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d101      	bne.n	800125c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001258:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800125a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d134      	bne.n	80012cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_RCC_GetSysClockFreq+0xa6>
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d003      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0xac>
 8001278:	e005      	b.n	8001286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800127c:	617b      	str	r3, [r7, #20]
      break;
 800127e:	e005      	b.n	800128c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001282:	617b      	str	r3, [r7, #20]
      break;
 8001284:	e002      	b.n	800128c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	617b      	str	r3, [r7, #20]
      break;
 800128a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	fb03 f202 	mul.w	r2, r3, r2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_RCC_GetSysClockFreq+0x108>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	0e5b      	lsrs	r3, r3, #25
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	3301      	adds	r3, #1
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80012cc:	69bb      	ldr	r3, [r7, #24]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	0800142c 	.word	0x0800142c
 80012e4:	00f42400 	.word	0x00f42400
 80012e8:	007a1200 	.word	0x007a1200

080012ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012f8:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001304:	f7ff f9a0 	bl	8000648 <HAL_PWREx_GetVoltageRange>
 8001308:	6178      	str	r0, [r7, #20]
 800130a:	e014      	b.n	8001336 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6593      	str	r3, [r2, #88]	@ 0x58
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001324:	f7ff f990 	bl	8000648 <HAL_PWREx_GetVoltageRange>
 8001328:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800133c:	d10b      	bne.n	8001356 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b80      	cmp	r3, #128	@ 0x80
 8001342:	d919      	bls.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2ba0      	cmp	r3, #160	@ 0xa0
 8001348:	d902      	bls.n	8001350 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	e013      	b.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	e010      	b.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b80      	cmp	r3, #128	@ 0x80
 800135a:	d902      	bls.n	8001362 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800135c:	2303      	movs	r3, #3
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	e00a      	b.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b80      	cmp	r3, #128	@ 0x80
 8001366:	d102      	bne.n	800136e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e004      	b.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b70      	cmp	r3, #112	@ 0x70
 8001372:	d101      	bne.n	8001378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 0207 	bic.w	r2, r3, #7
 8001380:	4909      	ldr	r1, [pc, #36]	@ (80013a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40022000 	.word	0x40022000

080013ac <memset>:
 80013ac:	4402      	add	r2, r0
 80013ae:	4603      	mov	r3, r0
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d100      	bne.n	80013b6 <memset+0xa>
 80013b4:	4770      	bx	lr
 80013b6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ba:	e7f9      	b.n	80013b0 <memset+0x4>

080013bc <__libc_init_array>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4d0d      	ldr	r5, [pc, #52]	@ (80013f4 <__libc_init_array+0x38>)
 80013c0:	4c0d      	ldr	r4, [pc, #52]	@ (80013f8 <__libc_init_array+0x3c>)
 80013c2:	1b64      	subs	r4, r4, r5
 80013c4:	10a4      	asrs	r4, r4, #2
 80013c6:	2600      	movs	r6, #0
 80013c8:	42a6      	cmp	r6, r4
 80013ca:	d109      	bne.n	80013e0 <__libc_init_array+0x24>
 80013cc:	4d0b      	ldr	r5, [pc, #44]	@ (80013fc <__libc_init_array+0x40>)
 80013ce:	4c0c      	ldr	r4, [pc, #48]	@ (8001400 <__libc_init_array+0x44>)
 80013d0:	f000 f818 	bl	8001404 <_init>
 80013d4:	1b64      	subs	r4, r4, r5
 80013d6:	10a4      	asrs	r4, r4, #2
 80013d8:	2600      	movs	r6, #0
 80013da:	42a6      	cmp	r6, r4
 80013dc:	d105      	bne.n	80013ea <__libc_init_array+0x2e>
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e4:	4798      	blx	r3
 80013e6:	3601      	adds	r6, #1
 80013e8:	e7ee      	b.n	80013c8 <__libc_init_array+0xc>
 80013ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ee:	4798      	blx	r3
 80013f0:	3601      	adds	r6, #1
 80013f2:	e7f2      	b.n	80013da <__libc_init_array+0x1e>
 80013f4:	0800145c 	.word	0x0800145c
 80013f8:	0800145c 	.word	0x0800145c
 80013fc:	0800145c 	.word	0x0800145c
 8001400:	08001460 	.word	0x08001460

08001404 <_init>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr

08001410 <_fini>:
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	bf00      	nop
 8001414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001416:	bc08      	pop	{r3}
 8001418:	469e      	mov	lr, r3
 800141a:	4770      	bx	lr
